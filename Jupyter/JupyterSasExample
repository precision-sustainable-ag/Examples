{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Importing python libraries and starting a sas session locally on windows"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "import os\n",
    "import json\n",
    "from pprint import pprint\n",
    "from airtable import Airtable\n",
    "import pandas as pd\n",
    "import saspy\n",
    "sas = saspy.SASsession(cfgname='winlocal')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Set api key as a global environment variable in Windows settings\n",
    "![Finding global variables](environment_variable.png)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "![Setting api key for Airtable](Jupyter/api_key.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- which database - base key**   \n",
    "**- which table - yield**  \n",
    "**- api key - stored locally as an environement variable in windows**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "base_key = 'appInRX5iM5iijXuY'\n",
    "table_name = 'yield'\n",
    "wheat_yield = Airtable(base_key, table_name, api_key=os.environ['AIRTABLE_API_KEY'])\n",
    "print(wheat_yield)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Call airtable library and get every record in the previously identified table"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Stuff in parentheses after dataframe call is a mystery.  Found at https://github.com/gtalarico/airtable-python-wrapper/blob/master/Airtable.ipynb\n",
    "Delete the Date/Time column because sas hates it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "examplerecords = airtable.get_all()    \n",
    "wheat_yield_df = pd.DataFrame.from_records((r['fields'] for r in examplerecords))\n",
    "wheat_yield_df = wheat_yield_df.drop(columns='Date/Time')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "wheat_yield_df.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Declare a sas libary on your local machine.  This is really just like a temp file to move data from pandas to sas.\n",
    "Windows normal string vs raw string, see: https://stackoverflow.com/questions/37400974/unicode-error-unicodeescape-codec-cant-decode-bytes-in-position-2-3-trunca"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sas.saslib('example', path=r\"C:\\Users\\screberg\\Documents\\My SAS Files\") "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Move data from pandas to SAS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sas_yield = sas.df2sd(df=wheat_yield_df,table='sas_yield',libref='example')\n",
    "sas_yield.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## This lets us look at some basic statistics for the variable of interest  \n",
    "dealing with temporary problem - all the data came in as character"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%SAS\n",
    "libname example 'C:\\Users\\screberg\\Documents\\My SAS Files';\n",
    "data example.sas_yield; set example.sas_yield;\n",
    "   Tstwght_num = input(Tstwght, 8.); run;\n",
    "proc univariate data=example.sas_yield; \n",
    "Var Tstwght_num; \n",
    "Histogram;\n",
    "run;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
